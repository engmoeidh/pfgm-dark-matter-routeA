import argparse, os, re
from pathlib import Path

TEX_HEADER = r"""% Auto-generated by paper_make_manifest.py
\section*{Figure \& Table Manifest}
This appendix lists all figures packaged in the submission and the LaTeX tables included from results/tables.

"""

FIG_TEMPLATE = r"""\begin{figure}[H]
  \centering
  \includegraphics[width=0.78\textwidth]{%s}
  \caption{Auto: %s}
  \label{fig:auto:%s}
\end{figure}

"""

INV_HEADER = r"""\begin{table}[H]
\centering
\begin{tabular}{ll}
\toprule
Path & Label \\
\midrule
"""
INV_FOOTER = r"""\bottomrule
\end{tabular}
\end{table}
"""

def labelize(p: Path) -> str:
    s = re.sub(r'[^A-Za-z0-9]+','-', p.stem).strip('-').lower()
    return s[:64]

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--figdir", required=True)
    ap.add_argument("--tabdir", required=True)
    ap.add_argument("--tex", required=True)
    args = ap.parse_args()

    out_path = Path(args.tex)
    out_path.parent.mkdir(parents=True, exist_ok=True)

    figroot = Path(args.figdir)
    tabroot = Path(args.tabdir)

    figs = sorted([p for p in figroot.rglob("*") if p.suffix.lower() in (".png",".pdf")])
    tabs = sorted([p for p in tabroot.rglob("*.tex")])

    with open(out_path, "w", encoding="utf-8") as f:
        f.write(TEX_HEADER)

        # Inventory table
        f.write(INV_HEADER)
        for p in figs:
            f.write(f"{p.as_posix()} & fig:auto:{labelize(p)} \\\\\n")
        f.write(INV_FOOTER + "\n\n")

        # Include the tables (just \input)
        if tabs:
            f.write("\\subsection*{LaTeX tables}\n")
            for t in tabs:
                f.write(f"\\noindent\\texttt{{{t.as_posix()}}}\n\n")
                f.write(f"\\input{{{t.as_posix()}}}\n\n")

        # Then place the figures (one per page)
        f.write("\\subsection*{Figures}\n")
        for p in figs:
            cap = p.name.replace("_","\\_")
            f.write(FIG_TEMPLATE % (p.as_posix(), cap, labelize(p)))

    print("Wrote", out_path.as_posix(), "with", len(figs), "figures and", len(tabs), "tables.")

if __name__ == "__main__":
    main()
